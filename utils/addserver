#!/bin/sh

dt=$(date '+%d/%m/%Y %H:%M:%S');

helpFunction()
{
   echo ""
   echo "Usage: $0 -a name -b path -c port"
   echo -e "\t-n Description of what is name"
   echo -e "\t-f Description of what is path"
   echo -e "\t-p Description of what is port"
   echo -e "\t-t Description of what is type"
   exit 1 # Exit script after printing help
}

while getopts "n:f:p:t:" opt
do
   case "$opt" in
      n ) name="$OPTARG" ;;
      f ) path="$OPTARG" ;;
      p ) port="$OPTARG" ;;
      t ) type="$OPTARG" ;;
      ? ) helpFunction ;; # Print helpFunction in case parameter is non-existent
   esac
done

# Print helpFunction in case parameters are empty
if [ -z "$name" ] && [ -z "$path" ] && [ -z "$port" ] && [ -z "$type" ]
then
   echo "Some or all of the parameters are empty";
   helpFunction
fi

# Begin script 

is_subdomain_available=true
is_port_available=true

# checks if subdomain already in use
subdomain_preexist=`cat /Users/rishi/projects/qdply-core/nginx-config/qdply \
| grep $name.qdply.com`
n=${#subdomain_preexist}

if [ $n == 0 ]
then 
   echo "Name checked..."
   echo "Proceedingd..."
else 
   echo "Subdomain already taken"
   is_subdomain_available=false
fi

# checks if port already in use
port_preexist=`cat /Users/rishi/projects/qdply-core/nginx-config/qdply \
| grep localhost:$port`
n=${#port_preexist}

if [ $n == 0 ]
then 
   echo "Port checked..."
   echo "Proceedingd..."
else 
   echo "Port already taken"
   is_port_available=true
fi

if [ $type == "react" ]
then
    echo "Staring REACT BUILD...."
    npm --prefix $path run build
    echo "Serving using pm2...."
    pm2 serve "$path/build" $port --name "$name-r" --spa
    return 0
elif [ $type == "static" ]
then
    echo "Serving static files using pm2..."
    pm2 serve $path $port --name "$name-s"
    return 0
else 
    return 13
fi

# add if port already in use
if [ $is_port_available == true ] && [ $is_subdomain_available == true ]
then
   echo >> /Users/rishi/projects/qdply-core/nginx-config/qdply
   echo "
   # Timestamp: $dt
   server {
         listen 80;

         server_name $name.qdply.com;

         location / {
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_pass http://localhost:$port;
         }
   }" >> /Users/rishi/projects/qdply-core/nginx-config/qdply
else
   echo "Failed"
fi

# nginx -t

# systemctl restart nginx

